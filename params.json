{"name":"Polyglot","tagline":"A Chatting application that uses Google translation API to provide the functionality of translation for users interacting in different languages.","body":"# polyGlot\r\nA chatting tool with the functionality of showing/ interpreting the conversation in the user specified language. This project will make use of befitting Google Translation API/ Bing translation API to perform translation in real time. \r\n\r\n### Course Session:\r\nThis project will be completed as a part of the CSC579/ CSC466 requirement for the summer 2015 session. \r\n\r\n###Project Members: \r\n* Nitin Goyal (CSC 466)\r\n* Harshit Jain (CSC 579) \r\n\r\n### Website: \r\n\r\n### What’s the problem and why is this important?\r\nThere are many chatting tools available in the market with lots of functionality but there are few tools that we have encountered over our research that supports the functionality of translation. This tool can assist user communication in following ways:\r\n* It assist the users of different language origin to interact with each other without being bounded by the language constraints.\r\n* Conversation transcript can be saved for future reference.\r\n\r\n### What is present out there?\r\nThere are few tools like skype and mobile apps like DROTR - calls and Chat translator already out there. Google Hangout is in the process of launching the translation functionality soon in the market. All these tools uses a bulk load of API’s and are not lightweight in terms of network use. \r\n\r\n### What’s our Approach?\r\nWe are looking for a minimal chatting solution with the translation functionality. Development of this tool will be done in Java using the networking module to interact with a web Space supported by a database. We assume that this application will be lightweight and much more flexible in terms of resource consumption. We have some experience in load/ stress testing web applications using JMeter, so we will be doing some stress testing on this tool to complete the quantitative.\r\n\r\n### Expected Deliverables:  \r\n* Week 1-2: Creation of a two interacting module/ GUI that will support interaction on localhost.\r\n* Week 2-3: Extending the modules to support interaction on two independent machine using the setup server/ web space.\r\n* Week 3-4: Incorporating translation functionality on the modules.\r\n* Week 4-5: Improving the GUI to make use of translation API and bug fixes.\r\n* Week 5-6: Support for multiple peers interaction and database management.\r\n* Week 6-7: Basic Functional, user and Stress testing on the tool.\r\n\r\n### Resources required:  \r\n* Translation API (Paid/Free)\r\n* Web Space to host the server and database\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}